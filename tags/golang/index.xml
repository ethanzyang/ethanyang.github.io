<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Jerrkill - 为学日益为道日损</title><link>https://jerrkill.github.io/tags/golang/</link><description>Recent content in golang on Jerrkill - 为学日益为道日损</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 18 Mar 2019 01:41:00 +0000</lastBuildDate><atom:link href="https://jerrkill.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>6. 开篇 - 标准库源码分析《 刻意学习 Golang 》</title><link>https://jerrkill.github.io/post/dev/6.opening-standard-library-source-code-analysis-deliberately-learning-golang/</link><pubDate>Mon, 18 Mar 2019 01:41:00 +0000</pubDate><guid>https://jerrkill.github.io/post/dev/6.opening-standard-library-source-code-analysis-deliberately-learning-golang/</guid><description>golang 基础的语法特性基本已经学完了，这几天我一直在思考下一步的学习方向跟计划。有很多方向可以选择比如：可以学习 web 编程、网络编程，往应用方向学习等</description></item><item><title>5. 并发神奇——协程 |《 刻意学习 Golang 》</title><link>https://jerrkill.github.io/post/dev/5.concurrency-magic-coroutine--deliberately-learning-golang/</link><pubDate>Tue, 12 Mar 2019 01:31:00 +0000</pubDate><guid>https://jerrkill.github.io/post/dev/5.concurrency-magic-coroutine--deliberately-learning-golang/</guid><description>先简单梳理一下，下面要讲的内容吧，看完 Go 的并发之后 脑子里就一个东西 『协程』。进程下面有线程、线程下面有协程。准备找个时间翻译几篇官方博客讲 Go</description></item><item><title>（译）反射的法则 | 《 The Go Blog 》</title><link>https://jerrkill.github.io/post/dev/the-law-of-reflection--the-go-blog/</link><pubDate>Sat, 09 Mar 2019 19:25:00 +0000</pubDate><guid>https://jerrkill.github.io/post/dev/the-law-of-reflection--the-go-blog/</guid><description>第一次翻译，英文不好，欢迎指正，争取有时间多看 &amp;amp; 翻译一些外文文章。在翻译过程中发现了很多的官方技术博客，讲得都很 nice ！有时间了继续译过来。 译者</description></item><item><title>4. 黑科技 Interface |《 刻意学习 Golang 》</title><link>https://jerrkill.github.io/post/dev/4.black-technology-interface--deliberately-learning-golang/</link><pubDate>Sat, 09 Mar 2019 01:27:00 +0000</pubDate><guid>https://jerrkill.github.io/post/dev/4.black-technology-interface--deliberately-learning-golang/</guid><description>看完 Go 的 Interface 后，整体感觉这不是我认识的 Interface，有很多新东西跟黑科技。下面通过对比 PHP以及 demo 来进行理解。 PHP 有构造函数、很多魔术方法</description></item><item><title>3. Struct 与 面向对象 |《 刻意学习 Golang 》</title><link>https://jerrkill.github.io/post/dev/3.-struct-and-object-oriented--deliberately-learning-golang/</link><pubDate>Fri, 08 Mar 2019 01:33:00 +0000</pubDate><guid>https://jerrkill.github.io/post/dev/3.-struct-and-object-oriented--deliberately-learning-golang/</guid><description>go 的变量是 name type, 老是写成 c 的 type name go 的 type name struct c 的typedef struct name struct 对比 PHP: PHP 中没有 struct 类型，这里对比 C 的 struct 支持匿名字段「嵌入字段」 type = c 的 typedef 初始化</description></item><item><title>2. 流程控制 与 函数 |《 刻意学习 Golang 》</title><link>https://jerrkill.github.io/post/dev/2.-process-control-and-functions--deliberately-learning-golang/</link><pubDate>Thu, 07 Mar 2019 01:16:00 +0000</pubDate><guid>https://jerrkill.github.io/post/dev/2.-process-control-and-functions--deliberately-learning-golang/</guid><description>golang 起源：学习 golang 笔记，看到 @Summer 的刻意练习、每日精进后，收益匪浅。编程就是需要刻意练习。坚持用此方法把 golang 看完。 书写思路说明：对比 php，理解 Go 的特</description></item></channel></rss>